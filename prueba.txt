app.get('/prueba', async (req, res) => {
  const rut = '11.111.111-1';

  try {
    // Limpiar datos previos (hijos -> padres)
    await pool.query('DELETE FROM pago WHERE clienteRut = $1', [rut]);
    await pool.query('DELETE FROM prestamo WHERE clienteRut = $1', [rut]);
    await pool.query('DELETE FROM evaluacion WHERE clienteRut = $1', [rut]); // ðŸ‘ˆ borrar evaluaciones antes de solicitudes
    await pool.query('DELETE FROM solicitud WHERE clienteRut = $1', [rut]);
    await pool.query('DELETE FROM historialCrediticio WHERE clienteRut = $1', [rut]);
    await pool.query('DELETE FROM clientes WHERE rut = $1', [rut]);

    // 1) Cliente
    const c = new Cliente(
      rut,
      'Ada Lovelace',
      'ada@correo.com',
      'Londres 123',
      '123456789',
      'secreta'
    );
    await c.save();

    // 2) Solicitud (primero, porque EvaluaciÃ³n depende de esto)
    const sol = await new Solicitud({
      clienteRut: rut,
      fechaSolicitud: '2025-09-28',
      documentos: 'CI.pdf;Liquidacion.pdf',
      estado: 'pendiente'
    }).save();

    // 3) Evaluaciones (ligadas a la solicitud) ðŸ‘‡ SIN sueldo
    const eva1 = await new Evaluacion({
      idSolicitud: sol.idSolicitud,
      clienteRut: rut,
      riesgo: 2
    }).save();

    // 4) PrÃ©stamo (ligado a la solicitud)
    const prest = await new Prestamo({
      idSolicitud: sol.idSolicitud,
      clienteRut: rut,
      monto: 1000000,
      tasa: 0.12,
      plazo: 12,
      estado: true
    }).save();

    // 5) Pago
    const pago1 = await new Pago({
      clienteRut: rut,
      fechaPago: '2025-10-01',
      dias_atraso: 0,
      monto: 100000,
      montoAtraso: 0
    }).save();

    // 6) Historial crediticio
    const hist = await new HistorialCrediticio({
      clienteRut: rut,
      prestamos_historicos: 1,
      prestamos_pagados_al_dia_historicos: 0,
      prestamos_atrasados_historicos: 0,
      prestamos_activos: 1,
      maximos_dias_atraso_historico: 0,
      deuda_actual: 900000
    }).save();

    res.json({
      ok: true,
      mensaje: 'Datos de prueba insertados',
      cliente: {
        rut: c.rut,
        nombre: c.nombre,
        numero_cuenta: c.numero_cuenta,
        saldo_cuenta: c.saldo_cuenta
      },
      solicitud: { idSolicitud: sol.idSolicitud, estado: sol.estado },
      evaluaciones: [
        { idEvaluacion: eva1.idEvaluacion, idSolicitud: sol.idSolicitud, riesgo: eva1.riesgo },
      ],
      prestamo: { idPrestamo: prest.idPrestamo, monto: prest.monto, tasa: prest.tasa },
      pago: { idPago: pago1.idPago, monto: pago1.monto },
      historial: {
        prestamos_activos: hist.prestamos_activos,
        deuda_actual: hist.deuda_actual
      }
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: e.message });
  }
});